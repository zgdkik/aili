package org.hbhk.aili.client.core.widget.print.ui;

import java.awt.BorderLayout;
import java.awt.Toolkit;
import java.io.InputStream;
import java.util.Locale;

import net.sf.jasperreports.engine.JRConstants;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrint;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class PreformatViewer extends javax.swing.JFrame {
	private static final Log log = LogFactory.getLog(PreformatViewer.class);

	private static final long serialVersionUID = JRConstants.SERIAL_VERSION_UID;

	/**
	 *
	 */
	private PreformatJRViewer viewer;

	/**
	 *
	 */
	private boolean isExitOnClose = true;

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(String sourceFile, boolean isXMLFile)
			throws JRException {
		this(sourceFile, isXMLFile, true);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(InputStream is, boolean isXMLFile)
			throws JRException {
		this(is, isXMLFile, true);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(JasperPrint jasperPrint) {
		this(jasperPrint, true);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(String sourceFile, boolean isXMLFile,
			boolean isExitOnClose) throws JRException {
		this(sourceFile, isXMLFile, isExitOnClose, null);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(InputStream is, boolean isXMLFile,
			boolean isExitOnClose) throws JRException {
		this(is, isXMLFile, isExitOnClose, null);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(JasperPrint jasperPrint, boolean isExitOnClose) {
		this(jasperPrint, isExitOnClose, null);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(String sourceFile, boolean isXMLFile,
			boolean isExitOnClose, Locale locale) throws JRException {
		if (locale != null) {
			setLocale(locale);
		}
		this.isExitOnClose = isExitOnClose;

		initComponents();

		this.viewer = new PreformatJRViewer(sourceFile, isXMLFile, locale);
		this.pnlMain.add(this.viewer, BorderLayout.CENTER);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(InputStream is, boolean isXMLFile,
			boolean isExitOnClose, Locale locale) throws JRException {
		if (locale != null) {
			setLocale(locale);
		}
		this.isExitOnClose = isExitOnClose;

		initComponents();

		this.viewer = new PreformatJRViewer(is, isXMLFile, locale);
		this.pnlMain.add(this.viewer, BorderLayout.CENTER);
	}

	/** Creates new form PreformatJasperViewer */
	public PreformatViewer(JasperPrint jasperPrint, boolean isExitOnClose,
			Locale locale) {
		if (locale != null) {
			setLocale(locale);
		}
		this.isExitOnClose = isExitOnClose;

		initComponents();

		this.viewer = new PreformatJRViewer(jasperPrint, locale);
		this.pnlMain.add(this.viewer, BorderLayout.CENTER);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		pnlMain = new javax.swing.JPanel();

		setTitle("PreformatJasperViewer");
		setIconImage(new javax.swing.ImageIcon(getClass().getResource(
				"/net/sf/jasperreports/view/images/jricon.GIF")).getImage());
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm();
			}
		});

		pnlMain.setLayout(new java.awt.BorderLayout());

		getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

		pack();

		Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit();
		java.awt.Dimension screenSize = toolkit.getScreenSize();
		int screenResolution = toolkit.getScreenResolution();
		float zoom = ((float) screenResolution)
				/ PreformatJRViewer.REPORT_RESOLUTION;

		int height = (int) (550 * zoom);
		if (height > screenSize.getHeight()) {
			height = (int) screenSize.getHeight();
		}
		int width = (int) (750 * zoom);
		if (width > screenSize.getWidth()) {
			width = (int) screenSize.getWidth();
		}

		java.awt.Dimension dimension = new java.awt.Dimension(width, height);
		setSize(dimension);
		setLocation((screenSize.width - width) / 2,
				(screenSize.height - height) / 2);
	}// GEN-END:initComponents

	/** Exit the Application */
	void exitForm() {// GEN-FIRST:event_exitForm
		this.setVisible(false);
		this.viewer.clear();
		this.viewer = null;
		this.getContentPane().removeAll();
		this.dispose();
	}// GEN-LAST:event_exitForm

	/**
	 *
	 */
	public void setZoomRatio(float zoomRatio) {
		viewer.setZoomRatio(zoomRatio);
	}

	/**
	 *
	 */
	public void setFitWidthZoomRatio() {
		viewer.setFitWidthZoomRatio();
	}

	/**
	 *
	 */
	public void setFitPageZoomRatio() {
		viewer.setFitPageZoomRatio();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		String fileName = null;
		boolean isXMLFile = false;

		for (int i = 0; i < args.length; i++) {
			if (args[i].startsWith("-XML")) {
				isXMLFile = true;
			} else if (args[i].startsWith("-F")) {
				fileName = args[i].substring(2);
			} else {
				fileName = args[i];
			}
		}

		if (fileName == null) {
			usage();
			return;
		}

		if (!isXMLFile && fileName.endsWith(".jrpxml")) {
			isXMLFile = true;
		}

		try {
			viewReport(fileName, isXMLFile);
		} catch (JRException e) {
			if (log.isErrorEnabled()) {
				log.error("Error viewing report.", e);
			}
			System.exit(1);
		}
	}

	/**
	 *
	 */
	private static void usage() {
		// System.out.println( "PreformatJasperViewer usage:" );
		// System.out.println( "\tjava PreformatJasperViewer [-XML] file" );
	}

	/**
	 *
	 */
	public static void viewReport(String sourceFile, boolean isXMLFile)
			throws JRException {
		viewReport(sourceFile, isXMLFile, true, null);
	}

	/**
	 *
	 */
	public static void viewReport(InputStream is, boolean isXMLFile)
			throws JRException {
		viewReport(is, isXMLFile, true, null);
	}

	/**
	 *
	 */
	public static void viewReport(JasperPrint jasperPrint) {
		viewReport(jasperPrint, true, null);
	}

	/**
	 *
	 */
	public static void viewReport(String sourceFile, boolean isXMLFile,
			boolean isExitOnClose) throws JRException {
		viewReport(sourceFile, isXMLFile, isExitOnClose, null);
	}

	/**
	 *
	 */
	public static void viewReport(InputStream is, boolean isXMLFile,
			boolean isExitOnClose) throws JRException {
		viewReport(is, isXMLFile, isExitOnClose, null);
	}

	/**
	 *
	 */
	public static void viewReport(JasperPrint jasperPrint, boolean isExitOnClose) {
		viewReport(jasperPrint, isExitOnClose, null);
	}

	/**
	 *
	 */
	public static void viewReport(String sourceFile, boolean isXMLFile,
			boolean isExitOnClose, Locale locale) throws JRException {
		PreformatViewer jasperViewer = new PreformatViewer(sourceFile,
				isXMLFile, isExitOnClose, locale);
		jasperViewer.setVisible(true);
	}

	/**
	 *
	 */
	public static void viewReport(InputStream is, boolean isXMLFile,
			boolean isExitOnClose, Locale locale) throws JRException {
		PreformatViewer jasperViewer = new PreformatViewer(is, isXMLFile,
				isExitOnClose, locale);
		jasperViewer.setVisible(true);
	}

	/**
	 *
	 */
	public static void viewReport(JasperPrint jasperPrint,
			boolean isExitOnClose, Locale locale) {
		PreformatViewer jasperViewer = new PreformatViewer(jasperPrint,
				isExitOnClose, locale);
		jasperViewer.setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel pnlMain;

	// End of variables declaration//GEN-END:variables

	// 设置套打时只有打印数据的JasperPrint对象
	public void setPreformatJasperPrint(JasperPrint preformatJasperPrint) {
		if (this.viewer != null) {
			this.viewer.setPreformatJasperPrint(preformatJasperPrint);
		}
	}
}
