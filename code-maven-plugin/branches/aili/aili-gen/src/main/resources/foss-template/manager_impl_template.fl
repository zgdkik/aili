[#ftl]
[#assign dao="${entityName?uncap_first}Dao"]
package com.deppon.${projectName}.module.${moduleName}.server.service.impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.deppon.${projectName}.framework.server.context.UserContext;
import com.deppon.${projectName}.module.${moduleName}.server.dao.I${entityName}Dao;
import com.deppon.${projectName}.module.${moduleName}.server.service.I${entityName}Service;
import com.deppon.${projectName}.module.${moduleName}.shared.domain.${entityName}Entity;
import com.deppon.foss.framework.exception.BusinessException;
/**
 * 
 * @author ${authName} ${.now}
 * 
 */
public class ${entityName}Service   implements I${entityName}Service{
	
	private I${entityName}Dao ${dao};
	
	/** 新增 */
	public void insert(${entityName}Entity entity) throws BusinessException {
		if(entity == null){
			throw new BusinessException("param is null");
		}
		String username =UserContext.getCurrentUser().getUserName();
		if(username == null || username.equals("")){
			throw new BusinessException("user not login");
		}
		String uuid = UUID.randomUUID().toString().replaceAll("-", "");
		entity.setId(uuid);
		entity.setActive("Y");
		entity.setCreateDate(new Date());
		entity.setCreateUser(username);
		this.${dao}.insert(entity);
	}
	
	/** 删除  **/
	public void delete(List<String> ids){
		if(ids==null || ids.size() == 0){
			throw new BusinessException("param is null");
		}
		String username =UserContext.getCurrentUser().getUserName();
		if(username == null || username.equals("")){
			throw new BusinessException("user not login");
		}
		this.${dao}.delete(ids, username);
    }
	
	/** 修改 */
	public void update(${entityName}Entity entity) throws BusinessException {
		if(entity == null){
			throw new BusinessException("param is null");
		}
		String username =UserContext.getCurrentUser().getUserName();
		if(username == null || username.equals("")){
			throw new BusinessException("user not login");
		}
		entity.setModifyDate(new Date());
		entity.setModifyUser(username);
		this.${dao}.update(entity);
	}
		
	/** 获取所有的记录 */
	public List<${entityName}Entity> getAll() throws BusinessException {
		
		return this.${dao}.getAll();
	}
	
	/** 获取符合条件的记录 */
	public List<${entityName}Entity> queryByEntity(${entityName}Entity entity , int start, int limit) {
		if(entity == null){
			throw new BusinessException("param is null");
		}
		return this.${dao}.queryByEntity(entity,start,limit);
	}
	
	public void set${dao?cap_first}(I${entityName}Dao ${dao}) {
		this.${dao} = ${dao};
	}
	
	/** 获取符合条件的记录数 */
	public Long queryByEntityCount(${entityName}Entity entity){
		if(entity == null){
			throw new BusinessException("param is null");
		}
		return  this.${dao}.queryByEntityCount(entity);
	}
	
}
